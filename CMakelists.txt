if (WIN32)
    cmake_minimum_required(VERSION 3.12)
elseif (APPLE)
    cmake_minimum_required(VERSION 3.17)
elseif (UNIX)
    cmake_minimum_required(VERSION 3.17)
endif ()
project(PaddleOcrOnnx)

set(CMAKE_CXX_STANDARD 11)
add_definitions(-DUNICODE -D_UNICODE)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions("-Wall -g -O0")
else ()
    add_definitions("-Wall")
endif ()

# OnnxRuntime
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/onnxruntime/include)
link_libraries(${CMAKE_CURRENT_SOURCE_DIR}/third_party/onnxruntime/lib/libonnxruntime.1.16.1.dylib)

# Gflags
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/gflags/include/)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/gflags/lib/)

# OpenCV
find_package(OpenCV REQUIRED PATHS ${CMAKE_CURRENT_SOURCE_DIR}/third_party/opencv/share/OpenCV NO_DEFAULT_PATH)
include_directories(${OpenCV_INCLUDE_DIRS})
if (OpenCV_FOUND)
    message(STATUS "OpenCV_LIBS: ${OpenCV_LIBS}")
    message(STATUS "OpenCV_INCLUDE_DIRS: ${OpenCV_INCLUDE_DIRS}")
else ()
    message(FATAL_ERROR "opencv Not Found!")
endif (OpenCV_FOUND)

# Source
include_directories(${CMAKE_SOURCE_DIR}/)
AUX_SOURCE_DIRECTORY(./src SRCS)
add_executable(PaddleOcrOnnx ${SRCS})

target_link_libraries(PaddleOcrOnnx ${OpenCV_LIBS})
target_link_libraries(PaddleOcrOnnx ${CMAKE_CURRENT_SOURCE_DIR}/third_party/onnxruntime/lib/libonnxruntime.1.16.1.dylib)
target_link_libraries(PaddleOcrOnnx ${CMAKE_CURRENT_SOURCE_DIR}/third_party/gflags/lib/libgflags.a)